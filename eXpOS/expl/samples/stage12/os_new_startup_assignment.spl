//  The eXpOS ABI stipulates that the code for a shared library 
//  must be loaded to disk blocks 13 and 14 of the disk. 
//  During OS startup, the OS is supposed to load this code into memory pages 63 and 64. 
//  This library code must be attached to logical page 0 and logical page 1 of each process. 
//  Thus, this code will be shared by every application program running on the operating system 
//  and is called the common shared library or simply the library.
loadi(63,13);
loadi(64,14);

// loading write interrupt routine 
loadi(16,29);
loadi(17,30);

// loading timer interrupt routine
loadi(4, 17);
loadi(5, 18);

// loading init code
loadi(65,7);
loadi(66,8);

// loading int10 module
loadi(22,35);
loadi(23,36);

// loading exception handler code 
loadi(2, 15);
loadi(3, 16);

// loading idle code from the disk 
loadi(69,11);
loadi(70,12);

// ------------ This is for the IDLE process ----------------

// as pid of the idle process is 0
PTBR = PAGE_TABLE_BASE;

// total address space is 10
PTLR = 10;


//Library
// giving the library support to the IDLE process 
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code : starting logical address: 4*512 = 2048

// first 8 word contains meta-data
// hence actual entry point is 2056

[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0110";

// setting user area page number in the process table 
[PROCESS_TABLE + 11 ] =  82;

// setting the PID of the IDLE process 
[PROCESS_TABLE + 1] = 0;

// setting the STATE of the IDLE process to CREATED
// this means that process is created but never scheduled
[PROCESS_TABLE + 4 ] =  CREATED;

// setting the UPTR entry for the IDLE process 
[PROCESS_TABLE + 13 ] =  8*512;

// setting the KPTR entry for the IDLE process to 0
[PROCESS_TABLE + 12 ] =  0;

// setting the PTBR field for the IDLE process to PAGE_TABLE_BASE
[PROCESS_TABLE + 14 ] =  PTBR;

// setting the PTLR field for the IDLE process to 10
[PROCESS_TABLE + 15 ] =  10;

// setting the IP for the IDLE process on top of the user stack
[81 * 512] = [69*512 + 1];

// ------------ This is for the INIT process ----------------
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code : starting logical address: 4*512 = 2048
// first 8 word contains meta-data
// hence actual entry point is 2056

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// setting user area page number of the INIT process in the process table 
// PT_ENTRY_SIZE ==> 16 words
[PROCESS_TABLE + PT_ENTRY_SIZE + 11 ] =  80;

// setting the PID of the INIT process 
[PROCESS_TABLE + PT_ENTRY_SIZE + 1] = 0;

// setting the STATE of the INIT process to RUNNING
[PROCESS_TABLE + PT_ENTRY_SIZE + 4 ] =  RUNNING;

// Set User Area Page number, UPTR, KPTR, PTBR and PTLR fields in the Process Table entry for init.

// setting the UPTR entry for the INIT process 
[PROCESS_TABLE + PT_ENTRY_SIZE + 13 ] =  8*512;

// setting the KPTR entry for the INIT process to 0
[PROCESS_TABLE + PT_ENTRY_SIZE + 12 ] =  0;

// setting the PTBR field for the INIT process to PAGE_TABLE_BASE+20;
[PROCESS_TABLE + PT_ENTRY_SIZE + 14 ] =  PAGE_TABLE_BASE+20;

// setting the PTLR field for the INIT process to 10
[PROCESS_TABLE + PT_ENTRY_SIZE + 15 ] =  10;


breakpoint;

// --------------------------------------------------------------------------------
// Initialise the machine's PTBR and PTLR registers for scheduling the INIT process.
// already Initialised 
breakpoint;

// setting the IP for the INIT process on top of the User Stack
[76*512] = [65*512 + 1];
SP = 8*512;

breakpoint;

// setting the system status table , as PID for INIT is 1
[SYSTEM_STATUS_TABLE + 1] = 1;

// transfer the control to the INIT
print "Stage 12";
ireturn;
