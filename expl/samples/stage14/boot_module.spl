// Boot module

//  The eXpOS ABI stipulates that the code for a shared library 
//  must be loaded to disk blocks 13 and 14 of the disk. 
//  During OS startup, the OS is supposed to load this code into memory pages 63 and 64. 
//  This library code must be attached to logical page 0 and logical page 1 of each process. 
//  Thus, this code will be shared by every application program running on the operating system 
//  and is called the common shared library or simply the library.
loadi(63,13);
loadi(64,14);

// loading write interrupt routine 
loadi(16,29);
loadi(17,30);

// loading timer interrupt routine
loadi(4, 17);
loadi(5, 18);

// loading init code
loadi(65,7);
loadi(66,8);

// loading int10 module
loadi(22,35);
loadi(23,36);

// loading exception handler code 
loadi(2, 15);
loadi(3, 16);

// loading the exec file
// 69 is the disk block in which the exec file is loaded
loadi(85,69);

// ------------ This is for the INIT process ----------------
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code : starting logical address: 4*512 = 2048
// first 8 word contains meta-data
// hence actual entry point is 2056

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

alias process_table_entry R0;
process_table_entry = PROCESS_TABLE + PT_ENTRY_SIZE;

// setting user area page number of the INIT process in the process table 
// PT_ENTRY_SIZE ==> 16 words
[process_table_entry + 11 ] =  80;

// setting the PID of the INIT process 
[process_table_entry + 1] = 1;

// setting the STATE of the INIT process to CREATED
[process_table_entry + 4 ] =  CREATED;

// Set User Area Page number, UPTR, KPTR, PTBR and PTLR fields in the Process Table entry for init.

// setting the UPTR entry for the INIT process 
[process_table_entry + 13 ] =  8*512;

// setting the KPTR entry for the INIT process to 0
[process_table_entry + 12 ] =  0;

// setting the PTBR field for the INIT process to PAGE_TABLE_BASE+20;
[process_table_entry + 14 ] =  PAGE_TABLE_BASE+20;

// setting the PTLR field for the INIT process to 10
[process_table_entry + 15 ] =  10;

[76*512] = [65*512 + 1];


// ------------- Loading the Even Program --------------
PTBR = PAGE_TABLE_BASE + 40;
process_table_entry = PROCESS_TABLE + 2*PT_ENTRY_SIZE;

//Shared Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 83;
[PTBR+5] = "0110";
[PTBR+6] = 84;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 85;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

// PT_ENTRY_SIZE ==> 16 words
// User Area Page

[process_table_entry + 11 ] =  89;
// PID
[process_table_entry + 1] = 2;

[process_table_entry + 4 ] =  CREATED;
// UPTR
[process_table_entry + 13 ] =  8*512;
// KPTR
[process_table_entry + 12 ] =  0;
// PTBR
[process_table_entry + 14 ] =  PAGE_TABLE_BASE+40;
// PTLR
[process_table_entry + 15 ] =  10;

// Stack pointer initialized to next instruction
[87*512] = [85*512 + 1];

// marking any other process table entry State to TERMINATED
alias pid R0;
pid = 3;

while (pid < MAX_PROC_NUM) do 
    [PROCESS_TABLE+ PT_ENTRY_SIZE*pid + 4] = TERMINATED;
    pid = pid + 1;
endwhile;

print "Boot Done";
return;